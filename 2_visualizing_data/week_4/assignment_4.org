* Imports
  #+BEGIN_SRC ipython :session assignment4 :results none
  # python standard library
  import os

  # third party
  import matplotlib.pyplot as pyplot
  import numpy
  import pandas
  import requests
  import seaborn
  #+END_SRC

  #+BEGIN_SRC ipython :session assignment4 :results none
  %matplotlib inline
  style = seaborn.axes_style("whitegrid")
  style["axes.grid"] = False
  seaborn.set_style("whitegrid", style)
  #+END_SRC

  #+BEGIN_SRC ipython :session assignment4 :results none
  EMPLOYMENT_DATA = "portland_hillsboro_vancouver_2007_2017.csv"
  EMPLOYMENT_URL = ("https://www.dropbox.com/s/gafy5iddilo26wk/"
                    "portland_hillsboro_vancouver_"
                    "employment_2007_2017.csv?dl=1")
  NATIONAL_DATA = "national_2007_2017.csv"
  NATIONAL_URL = ("https://www.dropbox.com/s/44yo1i9s550vdud/"
                  "national_unemployment_2007_2017.csv?dl=1")
  #+END_SRC
* Data
** National
   [[https://data.bls.gov/timeseries/LNS14000000][Bureau of Labor Statistics]]
   [[https://www.dropbox.com/s/44yo1i9s550vdud/national_unemployment_2007_2017.csv?dl=0][dropbox]]

#+BEGIN_SRC ipython :session assignment4 :results none
def load_data(path, url):
    """loads the data
    Args:
     path (str): path to csv file
     url (str): download url for csv file
    Returns:
     DataFrame: data from the csv file
    """
    if not os.path.isfile(path):
        response = requests.get(url)
        with open(path, 'w') as writer:
            writer.write(response.text)
    return pandas.read_csv(path)   
#+END_SRC

#+BEGIN_SRC ipython :session assignment4 :results none
national_data = load_data(NATIONAL_DATA, NATIONAL_URL)   
#+END_SRC

#+BEGIN_SRC ipython :session assignment4
national_data.describe()
#+END_SRC

#+RESULTS:
:               Year        Jan        Feb        Mar
: count    11.000000  11.000000  11.000000  11.000000
: mean   2012.000000   6.781818   6.754545   6.763636
: std       3.316625   1.895161   1.942866   1.991117
: min    2007.000000   4.600000   4.500000   4.400000
: 25%    2009.500000   4.950000   4.900000   5.050000
: 50%    2012.000000   6.600000   6.700000   6.700000
: 75%    2014.500000   8.150000   8.300000   8.450000
: max    2017.000000   9.800000   9.800000   9.900000

#+BEGIN_SRC ipython :session assignment4
national_data.head()
#+END_SRC

#+RESULTS:
:    Year  Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep   Oct  Nov  Dec
: 0  2007  4.6  4.5  4.4  4.5  4.4  4.6  4.7  4.6  4.7   4.7  4.7  5.0
: 1  2008  5.0  4.9  5.1  5.0  5.4  5.6  5.8  6.1  6.1   6.5  6.8  7.3
: 2  2009  7.8  8.3  8.7  9.0  9.4  9.5  9.5  9.6  9.8  10.0  9.9  9.9
: 3  2010  9.8  9.8  9.9  9.9  9.6  9.4  9.4  9.5  9.5   9.4  9.8  9.3
: 4  2011  9.1  9.0  9.0  9.1  9.0  9.1  9.0  9.0  9.0   8.8  8.6  8.5

#+BEGIN_SRC ipython :session assignment4
national_data.Dec.unique()
#+END_SRC

#+RESULTS:
: array(['5.0', '7.3', '9.9', '9.3', '8.5', '7.9', '6.7', '5.6', '4.7', ' '], dtype=object)

It looks like there are spaces in the data which is causing the columns to be interpreted as strings. First, they need to be converted to NaNs.

#+BEGIN_SRC ipython :session assignment4 :results none
national = national_data.replace("\s+", numpy.nan, regex=True)
#+END_SRC

Now the columns have to be converted to floats.

#+BEGIN_SRC ipython :session assignment4
columns = [column for column in national.columns if column != "Year"]
national[columns] = national[columns].astype(float)
national.describe()
#+END_SRC

#+RESULTS:
#+begin_example
              Year        Jan        Feb        Mar        Apr       May  \
count    11.000000  11.000000  11.000000  11.000000  10.000000  10.00000   
mean   2012.000000   6.781818   6.754545   6.763636   6.990000   7.00000   
std       3.316625   1.895161   1.942866   1.991117   2.001916   1.98774   
min    2007.000000   4.600000   4.500000   4.400000   4.500000   4.40000   
25%    2009.500000   4.950000   4.900000   5.050000   5.100000   5.42500   
50%    2012.000000   6.600000   6.700000   6.700000   6.900000   6.90000   
75%    2014.500000   8.150000   8.300000   8.450000   8.800000   8.80000   
max    2017.000000   9.800000   9.800000   9.900000   9.900000   9.60000   

            Jun        Jul        Aug        Sep        Oct        Nov  \
count  10.00000  10.000000  10.000000  10.000000  10.000000  10.000000   
mean    7.02000   7.020000   7.040000   6.990000   6.990000   6.980000   
std     1.94182   1.901929   1.929997   1.957578   1.964943   1.995439   
min     4.60000   4.700000   4.600000   4.700000   4.700000   4.600000   
25%     5.37500   5.350000   5.350000   5.225000   5.175000   5.200000   
50%     6.80000   6.750000   6.750000   6.650000   6.850000   6.850000   
75%     8.87500   8.800000   8.775000   8.700000   8.550000   8.375000   
max     9.50000   9.500000   9.600000   9.800000  10.000000   9.900000   

             Dec  
count  10.000000  
mean    6.990000  
std     1.891178  
min     4.700000  
25%     5.150000  
50%     7.000000  
75%     8.350000  
max     9.900000  
#+end_example

** Portland
  The data represents  `Local Area Unemployment Statistics` for the *Portland-Hillsboro-Vancouver* areas in Oregon and Washington and was taken from the [[https://data.bls.gov/timeseries/LAUMT413890000000003?amp%253bdata_tool=XGtable&output_view=data][Bureau of Labor Statistics]]. It has monthly values starting from January 2007 and continues through February 2017.

  I couldn't find a way to make a permanent link to it so I saved it to [[https://www.dropbox.com/s/gafy5iddilo26wk/portland_hillsboro_vancouver_employment_2007_2017.csv?dl=1][dropbox]]. This is some information taken from the page.

  | Item                    | Value                                                             |
  |-------------------------+-------------------------------------------------------------------|
  | Data extracted on       | April 25, 2017 (3:13:28 PM)                                       |
  | Series Id               | LAUMT413890000000003                                              |
  | Not Seasonally Adjusted |                                                                   |
  | Area                    | Portland-Vancouver-Hillsboro, OR-WA Metropolitan Statistical Area |
  | Area Type               | Metropolitan areas                                                |
  | State/Region/Division   | Oregon                                                            |

  #+BEGIN_SRC ipython :session assignment4 :results none
  data = load_data(EMPLOYMENT_DATA, EMPLOYMENT_URL)
  #+END_SRC

  #+BEGIN_SRC ipython :session assignment4
  data.describe()
  #+END_SRC

  #+RESULTS:
  :               Year
  : count   122.000000
  : mean   2011.590164
  : std       2.945101
  : min    2007.000000
  : 25%    2009.000000
  : 50%    2012.000000
  : 75%    2014.000000
  : max    2017.000000

  #+BEGIN_SRC ipython :session assignment4
  data.head()
  #+END_SRC

  #+RESULTS:
  :    Year Period labor force employment unemployment unemployment rate
  : 0  2007    Jan     1134639    1073299        61340               5.4
  : 1  2007    Feb     1138297    1075914        62383               5.5
  : 2  2007    Mar     1139649    1079579        60070               5.3
  : 3  2007    Apr     1135817    1079570        56247               5.0
  : 4  2007    May     1135088    1081737        53351               4.7

  For some reason there are more columns in the data then there are in the =describe= method.

  #+BEGIN_SRC ipython :session assignment4
  data.tail()
  #+END_SRC

  #+RESULTS:
  :      Year Period labor force  employment unemployment unemployment rate
  : 117  2016    Oct  1287314(R)  1229779(R)     57535(R)            4.5(R)
  : 118  2016    Nov  1289464(R)  1235529(R)     53935(R)            4.2(R)
  : 119  2016    Dec  1282972(R)  1231411(R)     51561(R)            4.0(R)
  : 120  2017    Jan     1278225     1223966        54259               4.2
  : 121  2017    Feb  1284347(P)  1234703(P)     49644(P)            3.9(P)

  It turns out that the Bureau adds extra labels to the data. According to the site there are two.

  | Label | Meaning                                          |
  |-------+--------------------------------------------------|
  | R     | Data were subject to revision on April 21, 2017. |
  | P     | Preliminary.                                     |

** Cleaning
   I'm going to remove the labels but first I'll re-name the columns with spaces in their names to make it closer to my naming convention.

   #+BEGIN_SRC ipython :session assignment4
   data.rename(columns={"labor force": "labor_force",
                        "unemployment rate": "unemployment_rate"},
               inplace=True)
   data.columns
   #+END_SRC

   #+RESULTS:
   : Index(['Year', 'Period', 'labor_force', 'employment', 'unemployment',
   :        'unemployment_rate'],
   :       dtype='object')
   
   Now I'll strip the labels.

   #+BEGIN_SRC ipython :session assignment4
   pattern = "\(R\)||\(P\)"
   columns = ["labor_force", "employment", "unemployment", "unemployment_rate"]
   for column in columns:
       data[column] = data[column].str.rstrip(pattern)
   data.describe()
   #+END_SRC

   #+RESULTS:
   :               Year
   : count   122.000000
   : mean   2011.590164
   : std       2.945101
   : min    2007.000000
   : 25%    2009.000000
   : 50%    2012.000000
   : 75%    2014.000000
   : max    2017.000000

   The data still isn't picking up the other columns, possibly because I didn't re-cast them to numbers.

#+BEGIN_SRC ipython :session assignment4
data.tail()
#+END_SRC

#+RESULTS:
:      Year Period labor_force employment unemployment unemployment_rate
: 117  2016    Oct     1287314    1229779        57535               4.5
: 118  2016    Nov     1289464    1235529        53935               4.2
: 119  2016    Dec     1282972    1231411        51561               4.0
: 120  2017    Jan     1278225    1223966        54259               4.2
: 121  2017    Feb     1284347    1234703        49644               3.9

#+BEGIN_SRC ipython :session assignment4
data[columns] = data[columns].apply(pandas.to_numeric)
data.describe()
#+END_SRC

#+RESULTS:
#+begin_example
              Year   labor_force    employment   unemployment  \
count   122.000000  1.220000e+02  1.220000e+02     122.000000   
mean   2011.590164  1.201675e+06  1.115516e+06   86158.557377   
std       2.945101  3.660963e+04  4.724591e+04   26167.286950   
min    2007.000000  1.134639e+06  1.047621e+06   49644.000000   
25%    2009.000000  1.180418e+06  1.088475e+06   63107.500000   
50%    2012.000000  1.200312e+06  1.102644e+06   79834.500000   
75%    2014.000000  1.214507e+06  1.133689e+06  107976.250000   
max    2017.000000  1.289464e+06  1.235529e+06  136640.000000   

       unemployment_rate  
count         122.000000  
mean            7.181967  
std             2.203154  
min             3.900000  
25%             5.300000  
50%             6.750000  
75%             8.875000  
max            11.400000  
#+end_example

** Creating Date-Times

   To make a time-series we need to create an extra column from the *Year* and *Period* (month) columns.

   #+BEGIN_SRC ipython :session assignment4
   data["date"] = data.apply(lambda x: "{0}-{1}".format(x.Period, x.Year), axis=1)
   data.head()
   #+END_SRC

   #+RESULTS:
   #+begin_example
      Year Period  labor_force  employment  unemployment  unemployment_rate  \
   0  2007    Jan      1134639     1073299         61340                5.4   
   1  2007    Feb      1138297     1075914         62383                5.5   
   2  2007    Mar      1139649     1079579         60070                5.3   
   3  2007    Apr      1135817     1079570         56247                5.0   
   4  2007    May      1135088     1081737         53351                4.7   

          date  
   0  Jan-2007  
   1  Feb-2007  
   2  Mar-2007  
   3  Apr-2007  
   4  May-2007  
#+end_example
   
* Unemployment Rate Over Time

  #+BEGIN_SRC ipython :session assignment4 :file /tmp/unemployment_over_time.png
  figure = pyplot.figure(figsize=(10, 10))
  axe = figure.gca()
  data.plot(x="date", y="unemployment_rate", ax=axe, label="Unemployment Rate")
  axe.set_title("Portland-Hillsboro-Vancouver Unemployment Over Time")
  axe.set_ylabel("% Unemployed")
  axe.set_xlabel("Month")
  seaborn.despine()
  #+END_SRC

  #+RESULTS:
  [[file:/tmp/unemployment_over_time.png]]
** One Year
   #+BEGIN_SRC ipython :session assignment4 :results none
   one_year = data[data.Year > 2015]
   one_year = one_year[one_year.date != "Jan-2016"]
   #+END_SRC

   #+BEGIN_SRC ipython :session assignment4 :file /tmp/unemployment_year.png
   figure = pyplot.figure(figsize=(10, 10))
   axe = figure.gca()
   one_year.plot(x='date', y="unemployment_rate", ax=axe, legend=False)
   axe.set_title("February 2016 - February 2017 Unemployment Rate")
   axe.set_ylabel("% Unemployment")
   axe.set_xlabel("Month")
   seaborn.despine()
   #+END_SRC

   #+RESULTS:
   [[file:/tmp/unemployment_year.png]]
** By year
   #+BEGIN_SRC ipython :session assignment4 :file /tmp/unemployment_years.png
   figure = pyplot.figure(figsize=(10,10))
   axe = figure.gca()

   for year in data.Year.unique():
       this_data = data[data.Year == year]
       this_data.plot(x="Period", y="unemployment_rate", ax=axe, legend=False)
       axe.text(11.5, this_data.unemployment_rate.iloc[-1], str(year))
   seaborn.despine()
   source = data[data.Year == 2016]
   pyplot.xticks(numpy.arange(source.Period.count()), source.Period)
   axe.set_ylabel("% Unemployment")
   axe.set_xlabel("Month")
   axe.set_title("Portland-Hillsboro-Vancouver Unemployment Rate by Month")

   #+END_SRC

   #+RESULTS:
   [[file:/tmp/unemployment_years.png]]
