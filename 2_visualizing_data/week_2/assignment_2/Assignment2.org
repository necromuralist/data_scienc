#+TITLE: Assignment 2

Before working on this assignment please read these instructions fully. In the submission area, you will notice that you can click the link to **Preview the Grading** for each step of the assignment. This is the criteria that will be used for peer grading. Please familiarize yourself with the criteria before beginning the assignment.

* Imports
#+BEGIN_SRC ipython :session assignment2 :results none
# third party
import matplotlib.pyplot as plt
import mplleaflet
import pandas as pd
pandas = pd
pyplot = plt
%matplotlib inline
#+END_SRC

* The Data
An NOAA dataset has been stored in the file `data/C2A2_data/BinnedCsvs_d400/466fd641958f8333f518c90c5f21321c7e5979287577671d966a2cd5.csv`. The data for this assignment comes from a subset of The National Centers for Environmental Information (NCEI) [[https://www1.ncdc.noaa.gov/pub/data/ghcn/daily/readme.txt][Daily Global Historical Climatology Network]] (GHCN-Daily). The GHCN-Daily is comprised of daily climate records from thousands of land surface stations across the globe.

Each row in the assignment datafile corresponds to a single observation.

The following variables are provided to you:

| Variable     | Description                                                    |
|--------------+----------------------------------------------------------------|
| =ID=         | station identification code                                    |
| =Date=       | date in YYYY-MM-DD format (e.g. 2012-01-24 = January 24, 2012) |
| =Element=    | indicator of element type (see next table)                     |
| =Data_Value= | data value for element (tenths of degrees C)                   |

The =Element= variable can have one of two values.

| Value  | Meaning                                   |
|--------+-------------------------------------------|
| =TMAX= | Maximum temperature (tenths of degrees C) |
| =TMIN= | Minimum temperature (tenths of degrees C) |
  

* Assignment Description
For this assignment, you must:

1. Read the documentation and familiarize yourself with the dataset, then write some python code which returns a line graph of the record high and record low temperatures by day of the year over the period 2005-2014. The area between the record high and record low temperatures for each day should be shaded.

2. Overlay a scatter of the 2015 data for any points (highs and lows) for which the ten year record (2005-2014) record high or record low was broken in 2015.

3. Watch out for leap days (i.e. February 29th), it is reasonable to remove these points from the dataset for the purpose of this visualization.

4. Make the visual nice! Leverage principles from the first module in this course when developing your solution. Consider issues such as legends, labels, and chart junk.

* Data Map 
The data you have been given is near **Portland, Oregon, United States**, and the stations the data comes from are shown on the map below.

#+BEGIN_SRC ipython :session assignment2
def leaflet_plot_stations(binsize, hashid):

    df = pd.read_csv('data/C2A2_data/BinSize_d{}.csv'.format(binsize))

    station_locations_by_hash = df[df['hash'] == hashid]

    lons = station_locations_by_hash['LONGITUDE'].tolist()
    lats = station_locations_by_hash['LATITUDE'].tolist()

    plt.figure(figsize=(8,8))

    plt.scatter(lons, lats, c='r', alpha=0.7, s=200)

    return mplleaflet.display()

leaflet_plot_stations(400,'466fd641958f8333f518c90c5f21321c7e5979287577671d966a2cd5')
#+END_SRC

#+RESULTS:
: <IPython.core.display.HTML object>

* Loading the Data

#+BEGIN_SRC ipython :session assignment2 :results none
hash_id = ("466fd641958f8333f518c90c5f21321c7e5979287577671d966a2cd5")
file_name = 'data/C2A2_data/{0}.csv'.format(hash_id)
data = pandas.read_csv(file_name)
#+END_SRC

* Getting rid of leap days

  I'll start by creating a /datetime/ column from the =Date= column and then converting the dates to the day of the year they represent.

#+BEGIN_SRC ipython :session assignment2 :results output
data["TimeStamp"] = pandas.to_datetime(data.Date)
data["DayOfYear"] = data.TimeStamp.apply(lambda stamp: stamp.dayofyear)
print(len(data.DayOfYear.unique()))
#+END_SRC

#+RESULTS:
: 366


#+BEGIN_SRC ipython :session assignment2 :results output
leap_years = data[data.Date.str.endswith("02-29")].Date.unique()
leap_years = [year.split("-")[0] for year in leap_years]
print(leap_years)
#+END_SRC

#+RESULTS:
: ['2008', '2012']

So there are two leap-days in the data set that need to be removed.

#+BEGIN_SRC ipython :session assignment2 :results output
leap_day = data[data.Date.str.endswith("02-29")].DayOfYear.unique()[0]
print(leap_day)
#+END_SRC

#+RESULTS:
: 60

#+BEGIN_SRC ipython :session assignment2 :results output
starting = len(data)
data = data[~data.Date.str.endswith('02-29')]
assert not any(data.Date.str.endswith("02-29"))
assert not "2012-02-29" in data.Date
assert not "2008-02-29" in data.Date
assert len(data) < starting
print(len(data.DayOfYear.unique()))
#+END_SRC

#+RESULTS:
: 366

This had me puzzled for a while, thinking that there should now be 365 days, but just because we took out February 29 doesn't mean that December 31st for that same year is no longer the 366th day. This would seem to mean that you have to shift both those years backwards of the day-of-the-year will be off by 1 after February 28th, so you have to off-set the days after the leap-day in the leap-years by 1.

#+BEGIN_SRC ipython :session assignment2 :results none
for year in leap_years:
    data.DayOfYear[
        data.Date.str.startswith(year)] = data.DayOfYear[
            data.Date.str.startswith(year)].apply(
                lambda day: day-1 if day > leap_day else day)
assert 366 not in data.DayOfYear.unique()
#+END_SRC

* Record Highs and Lows
  Now that we've removed the leap-year days, the next thing to do is to get the highs and lows for each day of the year from 2005 through 2014.


#+BEGIN_SRC ipython :session assignment2 :results output
print(len(data.DayOfYear.unique()))
#+END_SRC

#+RESULTS:
: 365

  I'll start by creating a /datetime/ column from the =Date= column and then isolating the years we want.

#+BEGIN_SRC ipython :session assignment2 :results none
fifteen = data[data.Date.str.startswith("2015")]
historical = data[~data.Date.str.startswith("2015")]
assert len(fifteen) + len(historical) == len(data)
#+END_SRC  

Now I'll isolate the maximums and minimums.
#+BEGIN_SRC ipython :session assignment2 :results none
h_groups = historical.groupby("DayOfYear")
maxes = h_groups.Data_Value.max()
mins = h_groups.Data_Value.min()
#+END_SRC

* 2015 Data
  
  We only want to plot the record-breaking data from 2015.

#+BEGIN_SRC ipython :session assignment2 :results output
f_groups = fifteen.groupby("DayOfYear")
f_maxes = f_groups.Data_Value.max()
f_mins = f_groups.Data_Value.min()
f_maxes = f_maxes[f_maxes > maxes]
f_mins = f_mins[f_mins < mins]
print(f_maxes.describe())
print(f_mins.describe())
#+END_SRC

#+RESULTS:
#+begin_example
count     39.000000
mean     273.615385
std       69.045605
min      167.000000
25%      214.000000
50%      272.000000
75%      330.500000
max      400.000000
Name: Data_Value, dtype: float64
count      9.000000
mean     -50.111111
std       70.052560
min     -147.000000
25%     -109.000000
50%      -14.000000
75%       -2.000000
max       40.000000
Name: Data_Value, dtype: float64
#+end_example

The temperatures are given in tenths of a degree Celsius so I'm going to scale them for the plot.

#+BEGIN_SRC ipython :session assignment2 :results none
maxes = maxes/10
mins = mins/10
f_maxes = f_maxes/10
f_mins = f_mins/10
#+END_SRC

#+BEGIN_SRC ipython :session assignment2 :file figures/max_min.png
pyplot.plot(maxes.index, maxes, color="lightsteelblue")
pyplot.plot(mins.index, mins, color="lightsteelblue", label="2005-2014")
axe = pyplot.gca()
axe.fill_between(mins.index, maxes, mins,
                 where=mins<=maxes, interpolate=True,
                 color="lightsteelblue",
                 alpha=0.25)
pyplot.scatter(f_maxes.index, f_maxes, facecolor="none", edgecolor="firebrick", zorder=3, label="2015 Record")
pyplot.scatter(f_mins.index, f_mins, facecolor="none", edgecolor="firebrick", zorder=3, label="Record Low")
axe.axis([0, 365, min(mins.min(), f_mins.min()), max(maxes.max(), f_maxes.max()) + 10])
axe.set_xlabel("Day Of Year", alpha=0.75)
axe.set_ylabel("Temperatures (C)", alpha=0.75)
axe.set_title("2015 Portland, Ten-Year Extreme Temperatures")
pyplot.tick_params(axis="both", which="both", bottom="off", left="off")
handles, labels = axe.get_legend_handles_labels()
axe.legend(handles[1:3], labels[1:3])
for key in axe.spines:
    axe.spines[key].set_visible(False)
#+end_SRC

#+RESULTS:
[[file:figures/max_min.png]]
