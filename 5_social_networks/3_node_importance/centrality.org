#+TITLE: Measures of Centrality

[[https://en.wikipedia.org/wiki/Centrality][Node Centrality]] is a measure of the importance of a node to a network. This will explore measures of centrality using two networks, a friendship network, and a blog network.

* Part 1 - Friendships

This will look at a network of friendships at a university department. Each node corresponds to a person (identified by an integer node label), and an edge indicates friendship. 

** Imports

#+BEGIN_SRC ipython :session centrality :results none
import networkx
#+END_SRC

** Friendships data
#+BEGIN_SRC ipython :session centrality :results none
friendships = networkx.read_gml('friendships.gml')
#+END_SRC

#+BEGIN_SRC ipython :session centrality :results output
print(len(friendships))
print(networkx.is_connected(friendships))
print(networkx.is_directed(friendships))
#+END_SRC

#+RESULTS:
: 1133
: True
: False

There are 1,133 people in the friendship network, which is a connected, undirected graph.

** Degree, Closeness, and Normalized Betweenness Centrality

Find the degree centrality, closeness centrality, and normalized betweenness centrality (excluding endpoints) of node 100.

 - [[https://en.wikipedia.org/wiki/Centrality#Degree_centrality][Degree Centrality]] scores the nodes based on the number of links they have to other nose. The assumption is that a node with more connections should be more important.
 - [[https://en.wikipedia.org/wiki/Closeness_centrality][Closeness Centrality]] uses the lengths of shortest paths to decide importance. The less distance there is between a node and the other nodes the more important it is.
 - [[https://en.wikipedia.org/wiki/Betweenness_centrality][Betweenness Centrality]] counts the number of shortest paths between pairs of nodes that pass through a node.

#+BEGIN_SRC ipython :session centrality :results none
DEGREE_CENTRALITY = networkx.degree_centrality(friendships)
CLOSENESS_CENTRALITY = networkx.closeness_centrality(friendships)
BETWEENNESS_CENTRALITY = networkx.betweenness_centrality(friendships)
#+END_SRC

#+BEGIN_SRC ipython :session centrality :results none
def node_centrality(node=100):
    """gets measures of centrality for node

    Args:
     node (int): the number (key) for the node

    Returns:
     tuple: 
      - float: degree centrality
      - float: closeness centrality
      - float: normalized betweeness centrality
    """
    return (DEGREE_CENTRALITY[node],
            CLOSENESS_CENTRALITY[node], BETWEENNESS_CENTRALITY[node])
#+END_SRC

#+BEGIN_SRC ipython :session centrality :results output
print("Node 101:")
degree, closeness, betweenness = node_centrality()
print("Degree Centrality: {0:.4f}".format(degree))
print("Closeness Centrality: {0:.2f}".format(closeness))
print("Normalized Betweenness Centrality: {0:.6f}".format(betweenness))
#+END_SRC

#+RESULTS:
: Node 101:
: Degree Centrality: 0.0027
: Closeness Centrality: 0.27
: Normalized Betweenness Centrality: 0.000071


#+BEGIN_SRC ipython :session centrality :results none
def largest_node(centrality):
    """gets the node with the best (largest) score

    Args:
     centrality (dict): one of the centrality score dicts

    Returns:
     int: name of the node with the best score
    """
    return list(
        reversed(sorted((value, node)
                        for (node, value) in centrality.items())))[0][1]
#+END_SRC

** Most Connected Friend

We want to contact one person in our friendship network and have him or her contact all his or her immediate friends. To have the greatest impact, this person should have the most links in the network. Which node is this?

#+BEGIN_SRC ipython :session centrality :results none
def most_connected_friend():
    """returns the node with the best degree centrality"""
    return largest_node(DEGREE_CENTRALITY)
#+END_SRC

#+BEGIN_SRC ipython :session centrality :results output
MOST_CONNECTED = most_connected_friend()
print("Most Connected Friend: {}".format(MOST_CONNECTED))
#+END_SRC

#+RESULTS:
: Most Connected Friend: 105

#+BEGIN_SRC ipython :session centrality :file /tmp/most_connected_friend.png
connected = networkx.Graph()
friends = friendships[MOST_CONNECTED]
for friend in friends:
    connected.add_edge(MOST_CONNECTED, friend)
positions = networkx.spring_layout(connected)
networkx.draw(connected, positions, with_labels=False, node_color='b', node_size=50)
networkx.draw(connected, positions, nodelist=[MOST_CONNECTED], node_color="r")
#+END_SRC

#+RESULTS:
[[file:/tmp/most_connected_friend.png]]

Node 105 does appear to be well connected.

** Fewest Hops

   We want to reach everyone in the network by having one person passing messages to his friends who can then pass it on and so forth (a six-degrees of separation type scenario) but we want the fewest number of transfers. /Which friend is closest to all the people in the friendship network?/

#+BEGIN_SRC ipython :session centrality :results none
def closest_friend():
    """the node with the best closeness centrality

    Returns:
     int: Identifier for the node closest to all the other nodes
    """
    return largest_node(CLOSENESS_CENTRALITY)
#+END_SRC

#+BEGIN_SRC ipython :session centrality :results output
CLOSEST_FRIEND = closest_friend()
print("Closest Friend: {}".format(CLOSEST_FRIEND))
#+END_SRC

#+RESULTS:
: Closest Friend: 23

#+BEGIN_SRC ipython :session centrality :file /tmp/closest_friend.png
positions = networkx.spring_layout(friendships)
networkx.draw(friendships, positions, node_size=1, alpha=0.25, node_color='b')
networkx.draw_networkx_nodes(friendships, positions, nodelist=[CLOSEST_FRIEND],
                             node_color='r', node_size=50)
#+END_SRC

#+RESULTS:
[[file:/tmp/closest_friend.png]]
Interesting to look at, if not the most informative.
** Most Important Connection

   Although the graph is connected, if you took out one persion from the network, which one would cause the most disruption (which person is in the path of the most shortest paths)?

#+BEGIN_SRC ipython :session centrality :results none
def betweenness_centrality():
    """the node with the highest betweenness centrality

    Returns:
     int: ID of the person who sits on the most shortest paths
    """
    return largest_node(BETWEENNESS_CENTRALITY)
#+END_SRC

#+BEGIN_SRC ipython :session centrality :results output
MOST_BETWEEN = betweenness_centrality()
print("Most Between Friend: {}".format(MOST_BETWEEN))
#+END_SRC

#+RESULTS:
: Most Between Friend: 333

* Part 2 - Political Blogs

Now we're going to use [[https://en.wikipedia.org/wiki/PageRank][PageRank]] and [[https://en.wikipedia.org/wiki/HITS_algorithm][Hyperlink-Induced Topic Search (HITS)]]  to look at a directed network of political blogs, where nodes correspond to a blog and edges correspond to links between blogs.

#+BEGIN_SRC ipython :session centrality :results none
blogs = networkx.read_gml('blogs.gml')
#+END_SRC

#+BEGIN_SRC ipython :session centrality :results output
print(len(blogs))
print(networkx.is_directed(blogs))
#+END_SRC

#+RESULTS:
: 1490
: True

#+BEGIN_SRC ipython :session centrality :file /tmp/political.png
networkx.draw(blogs, alpha=0.5, node_size=1, node_color='r')
#+END_SRC

#+RESULTS:
[[file:/tmp/political.png]]

** Scaled Page Rank of /realclearpolitics.com/
   
   /PageRank/ scores web-pages by the number of important nodes that link directly to them. It is possible for the algorithm to get stuck if there are no edges leading out from a directed subgraph, producing erroneous page-ranks so the /Scaled Page Rank/ uses a random-restart do decide when to occasionally jump to a new node, an idea similar to the way Stochastic Gradient Descent avoids being stuck in local minima. The [[https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.algorithms.link_analysis.pagerank_alg.pagerank.html][Networkx pagerank]] uses a default of 0.85, which I will use, so it will do a random-restart about 15% of the time.

#+BEGIN_SRC ipython :session centrality :results none
PAGE_RANK = networkx.pagerank(blogs)
#+END_SRC

#+BEGIN_SRC ipython :session centrality :results none
def real_clear_politics_page_rank():
    """Page Rank of realclearpolitics.com

    Returns:
     float: The PageRank for the realclearpolitics blog.
    """
    return PAGE_RANK['realclearpolitics.com']
#+END_SRC

#+BEGIN_SRC ipython :session centrality :results output
print("Real Clear Politics Page Rank: {0:.4f}".format(real_clear_politics_page_rank()))
#+END_SRC

#+RESULTS:
: Real Clear Politics Page Rank: 0.0046

** Top Five Blogs by Page Rank

   This time the PageRank scores will be used to find what it thinks are the most important blogs.

#+BEGIN_SRC ipython :session centrality :results none
def top_five(ranks, count=5):
    """gets the top-five blogs by rank

    Args:
     count (int): number to return

    Returns:
     list [str]: names of the top blogs - most to least important
    """
    top = list(reversed(sorted((rank, node)
                               for node, rank in ranks.items())))[:count]
    return [node for rank, node in top]
#+END_SRC

#+BEGIN_SRC ipython :session centrality :results none
def top_five_page_rank():
    """Top 5 nodes by page rank

    Returns:
     list [str]: top-five blogs by page-rank
    """
    return top_five(PAGE_RANK)
#+END_SRC

#+BEGIN_SRC ipython :session centrality :results output
print("Top Five Blogs by PageRank")

for blog in top_five_page_rank():
    print("  - {}".format(blog))
#+END_SRC

#+RESULTS:
: Top Five Blogs by PageRank
:   - dailykos.com
:   - atrios.blogspot.com
:   - instapundit.com
:   - blogsforbush.com
:   - talkingpointsmemo.com

** HITS Score for Real Clear Politics

This uses the HITS algorithm to find the authority and hub scores for /realclearpolitics.com/. This algorithm tries to identify =hubs=, collections of links that directed users to important pages, and =authoratative= pages, pages that are deemed important because of their relevant content (as identified by the fact that they are linked to by =hubs=).

#+BEGIN_SRC ipython :session centrality :results none
HUBS, AUTHORITIES = networkx.hits(blogs)
#+END_SRC

#+BEGIN_SRC ipython :session centrality :results none
def real_clear_politics_hits():
    """HITS score for realclearpolitics.com

    Returns:
     tuple (float, float): hub score, authority score
    """
    return HUBS['realclearpolitics.com'], AUTHORITIES['realclearpolitics.com']
#+END_SRC

#+BEGIN_SRC ipython :session centrality :results output
hub, authority = real_clear_politics_hits()
print("Real Clear Politics")
print("Hub: {0:.5f}\nAuthority: {0:.5f}".format(hub, authority))
#+END_SRC

#+RESULTS:
: Real Clear Politics
: Hub: 0.00032
: Authority: 0.00032

** Top 5 Blogs by Hub Score
   This will find the top five blogs based on their hub scores (meaning they are the ones who link to the most authoratative sites).

#+BEGIN_SRC ipython :session centrality :results none
def top_five_hubs():
    """Top five blogs by hub scores

    Returns:
     list (str): Names of top-five hub blogs
    """
    return top_five(HUBS)
#+END_SRC

#+BEGIN_SRC ipython :session centrality :results output
top_five_hub_blogs = top_five_hubs()
print('Top Five Hub Blogs')
for blog in top_five_hub_blogs:
    print(" - {}".format(blog))
#+END_SRC

#+RESULTS:
: Top Five Hub Blogs
:  - politicalstrategy.org
:  - madkane.com/notable.html
:  - liberaloasis.com
:  - stagefour.typepad.com/commonprejudice
:  - bodyandsoul.typepad.com

** Top Five Blogs By Authority
   This will find the top five political blogs based on how many of the hub-blogs link to them.

#+BEGIN_SRC ipython :session centrality :results none
def top_five_authorities():
    """the top 5 blogs by authorities score

    Returns:
     list (str): names of the most authoratative blogs
    """
    return top_five(AUTHORITIES)
#+END_SRC

#+BEGIN_SRC ipython :session centrality :results output
print("Top Five Authoratative Blogs")
authoratative_blogs = top_five_authorities()
for blog in authoratative_blogs:
    print(" - {}".format(blog))
#+END_SRC

#+RESULTS:
: Top Five Authoratative Blogs
:  - dailykos.com
:  - talkingpointsmemo.com
:  - atrios.blogspot.com
:  - washingtonmonthly.com
:  - talkleft.com
