#+TITLE: Random Graphs

* Imports

#+BEGIN_SRC ipython :session randomgraphs :results none
# python standard library
import pickle

# from pypi
import networkx
import numpy
import pandas
#+END_SRC

#+BEGIN_SRC ipython :session randomgraphs :results none
% matplotlib inline
#+END_SRC

* Part 1 - Random Graph Identification
 
For the first part of this assignment you will analyze randomly generated graphs and determine which algorithm created them.

* Load the data

#+BEGIN_SRC ipython :session randomgraphs :results output
part_one_graphs = pickle.load(open('A4_graphs','rb'))
print(len(part_one_graphs))
print(type(part_one_graphs[0]))
#+END_SRC

#+RESULTS:
: 5
: <class 'networkx.classes.graph.Graph'>

=part_one_graphs= is a list containing 5 networkx graphs. Each of these graphs were generated by one of three possible algorithms:

 - Preferential Attachment (`'PA'`)
 - Small World with low probability of rewiring (`'SW_L'`)
 - Small World with high probability of rewiring (`'SW_H'`)

Analyze each of the 5 graphs and determine which of the three algorithms generated the graph.

*The `graph_identification` function should return a list of length 5 where each element in the list is either `'PA'`, `'SW_L'`, or `'SW_H'`.*

#+BEGIN_SRC ipython :session randomgraphs :results none
def graph_identification():
    """Identifies the type of graph each of the graphs is

    Returns:
     list: string identifiers for the type of graph
    """
    graph_types = []
    for graph in part_one_graphs:
        path = networkx.average_shortest_path_length(graph)
        coefficient = networkx.average_clustering(graph)
        if path > 6:
            if coefficient < 0.5:
                graph_types.append("SW_L")
            else:
                raise Exception("unexpected type")
        else:
            if coefficient < 0.5:
                graph_types.append("PA")
            else:
                graph_types.append("SW_H")
    return graph_types
#+END_SRC

* Part 2 - Company Emails

For the second part of this assignment you will be working with a company's email network where each node corresponds to a person at the company, and each edge indicates that at least one email has been sent between two people.

The network also contains the node attributes `Department` and `ManagementSalary`.

`Department` indicates the department in the company which the person belongs to, and `ManagementSalary` indicates whether that person is receiving a managment position salary.

#+BEGIN_SRC ipython :session randomgraphs :results output
email = networkx.read_gpickle('email_prediction.txt')
print(networkx.info(email))
#+END_SRC

#+RESULTS:
: Name: 
: Type: Graph
: Number of nodes: 1005
: Number of edges: 16706
: Average degree:  33.2458

** Part 2A - Salary Prediction

Using network `email`, identify the people in the network with missing values for the node attribute `ManagementSalary` and predict whether or not these individuals are receiving a managment position salary.

To accomplish this, you will need to create a matrix of node features using networkx, train a sklearn classifier on nodes that have `ManagementSalary` data, and predict a probability of the node receiving a managment salary for nodes where `ManagementSalary` is missing.

Your predictions will need to be given as the probability that the corresponding employee is receiving a managment position salary.

The evaluation metric for this assignment is the Area Under the ROC Curve (AUC).

Your grade will be based on the AUC score computed for your classifier. A model which with an AUC of 0.75 or higher will receive full points.

Using your trained classifier, return a series of length 252 with the data being the probability of receiving managment salary, and the index being the node id.
 
#+BEGIN_EXAMPLE  
      1       1.0
      2       0.0
      5       0.8
      8       1.0
          ...
      996     0.7
      1000    0.5
      1001    0.0
      Length: 252, dtype: float64
#+END_EXAMPLE

#+BEGIN_SRC ipython :session randomgraphs :results raw
data = pandas.DataFrame(index=email.nodes())
data["department"] = pandas.Series(networkx.get_node_attributes(email, "Department"))
data["management"] = pandas.Series(networkx.get_node_attributes(email, "ManagementSalary"))
data.head()
#+END_SRC

#+RESULTS:
   department  management
0           1         0.0
1           1         NaN
2          21         NaN
3          21         1.0
4          21         1.0

#+BEGIN_SRC ipython :session randomgraphs :results output
print(data.management.unique())
print(data.department.unique())
#+END_SRC

#+RESULTS:
: [  0.  nan   1.]
: [ 1 21 25 14  9 26  4 17 34 11  5 10 36 37  7 22  8 15  3 29 20 16 38 27 13
:   6  0 28  2 40 35 23 19 24 32 31 39 12 30 41 18 33]

#+BEGIN_SRC ipython :session randomgraphs :results none
missing_management = data[data.management.isnull()]
training = data[data.management.notnull()]
assert len(missing_management) + len(training) == len(data)
#+END_SRC

# In[ ]:


def salary_predictions():
    
    # Your Code Here
    
    return # Your Answer Here


# ### Part 2B - New Connections Prediction
# 
# For the last part of this assignment, you will predict future connections between employees of the network. The future connections information has been loaded into the variable `future_connections`. The index is a tuple indicating a pair of nodes that currently do not have a connection, and the `Future Connection` column indicates if an edge between those two nodes will exist in the future, where a value of 1.0 indicates a future connection.

# In[ ]:


future_connections = pd.read_csv('Future_Connections.csv', index_col=0, converters={0: eval})
future_connections.head(10)


# Using network `G` and `future_connections`, identify the edges in `future_connections` with missing values and predict whether or not these edges will have a future connection.
# 
# To accomplish this, you will need to create a matrix of features for the edges found in `future_connections` using networkx, train a sklearn classifier on those edges in `future_connections` that have `Future Connection` data, and predict a probability of the edge being a future connection for those edges in `future_connections` where `Future Connection` is missing.
# 
# 
# 
# Your predictions will need to be given as the probability of the corresponding edge being a future connection.
# 
# The evaluation metric for this assignment is the Area Under the ROC Curve (AUC).
# 
# Your grade will be based on the AUC score computed for your classifier. A model which with an AUC of 0.75 or higher will receive full points.
# 
# Using your trained classifier, return a series of length 122112 with the data being the probability of the edge being a future connection, and the index being the edge as represented by a tuple of nodes.
# 
#     Example:
#     
#         (107, 348)    0.35
#         (542, 751)    0.40
#         (20, 426)     0.55
#         (50, 989)     0.35
#                   ...
#         (939, 940)    0.15
#         (555, 905)    0.35
#         (75, 101)     0.65
#         Length: 122112, dtype: float64

# In[ ]:


def new_connections_predictions():
    
    # Your Code Here
    
    return # Your Answer Here

