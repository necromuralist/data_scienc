#+TITLE: Creating a feature matrix from a networkx graph

In this notebook we will look at a few ways to quickly create a feature matrix from a networkx graph.

* Imports
#+BEGIN_SRC ipython :session features :results none
import networkx
import pandas
#+END_SRC

* The Data
#+BEGIN_SRC ipython :session features :results none
major_cities = nx.read_gpickle('major_us_cities')
#+END_SRC

** Node based features

#+BEGIN_SRC ipython :session features
major_cities.nodes(data=True)[:5]
#+END_SRC

#+RESULTS:
| Indianapolis, IN | (location : (-86 39) population : 843393)  |
| New Orleans, LA  | (location : (-90 29) population : 378715)  |
| Portland, OR     | (location : (-122 45) population : 609456) |
| Detroit, MI      | (location : (-83 42) population : 688701)  |
| Tulsa, OK        | (location : (-95 36) population : 398121)  |

Initialize the dataframe, using the nodes as the index.

#+BEGIN_SRC ipython :session features :results none
data = pandas.DataFrame(index=major_cities.nodes())
#+END_SRC

* Extracting attributes

Using `nx.get_node_attributes` it's easy to extract the node attributes in the graph into DataFrame columns.

#+BEGIN_SRC ipython :session features :results raw
data['location'] = pandas.Series(networkx.get_node_attributes(major_cities, 'location'))
data['population'] = pandas.Series(networkx.get_node_attributes(major_cities, 'population'))

data.head()
#+END_SRC

#+RESULTS:
:                     location  population
: Indianapolis, IN   (-86, 39)      843393
: New Orleans, LA    (-90, 29)      378715
: Portland, OR      (-122, 45)      609456
: Detroit, MI        (-83, 42)      688701
: Tulsa, OK          (-95, 36)      398121

* Creating node based features

Most of the networkx functions related to nodes return a dictionary, which can also easily be added to our dataframe.

#+BEGIN_SRC ipython :session features :results raw
data['clustering'] = pandas.Series(networkx.clustering(major_cities))
data['degree'] = pandas.Series(major_cities.degree())

data.head()
#+END_SRC

#+RESULTS:
                    location  population  clustering  degree
Indianapolis, IN   (-86, 39)      843393    0.641026      13
New Orleans, LA    (-90, 29)      378715    0.607143       8
Portland, OR      (-122, 45)      609456    0.000000       2
Detroit, MI        (-83, 42)      688701    0.672727      11
Tulsa, OK          (-95, 36)      398121    0.727273      11

* Edge based features

#+BEGIN_SRC ipython :session features :results raw
major_cities.edges(data=True)[:5]
#+END_SRC

#+RESULTS:
| Indianapolis, IN | Cleveland, OH   | (weight : 422.649765785015)  |
| Indianapolis, IN | Atlanta, GA     | (weight : 687.1751452631671) |
| Indianapolis, IN | Washington D.C. | (weight : 789.4034447188161) |
| Indianapolis, IN | Kansas City, MO | (weight : 726.2520742478256) |
| Indianapolis, IN | Raleigh, NC     | (weight : 795.0096232862684) |


Initialize the dataframe, using the edges as the index

#+BEGIN_SRC ipython :session features :results none
data = pandas.DataFrame(index=major_cities.edges())
#+END_SRC

* Extracting attributes

Using `nx.get_edge_attributes`, it's easy to extract the edge attributes in the graph into DataFrame columns.

#+BEGIN_SRC ipython :session features :results raw
data['weight'] = pandas.Series(networkx.get_edge_attributes(major_cities, 'weight'))

data.head()
#+END_SRC

#+RESULTS:
                                         weight
(Indianapolis, IN, Cleveland, OH)    422.649766
(Indianapolis, IN, Atlanta, GA)      687.175145
(Indianapolis, IN, Washington D.C.)  789.403445
(Indianapolis, IN, Kansas City, MO)  726.252074
(Indianapolis, IN, Raleigh, NC)      795.009623

* Creating edge based features

Many of the networkx functions related to edges return a nested data structures. We can extract the relevant data using list comprehension.

#+BEGIN_SRC ipython :session features :results raw
data['preferential attachment'] = [i[2]
                                   for i in networkx.preferential_attachment(
                                           major_cities, data.index)]

data.head()
#+END_SRC

#+RESULTS:
                                         weight  preferential attachment
(Indianapolis, IN, Cleveland, OH)    422.649766                      182
(Indianapolis, IN, Atlanta, GA)      687.175145                      117
(Indianapolis, IN, Washington D.C.)  789.403445                      156
(Indianapolis, IN, Kansas City, MO)  726.252074                      182
(Indianapolis, IN, Raleigh, NC)      795.009623                      169

In the case where the function expects two nodes to be passed in, we can map the index to a lamda function.


#+BEGIN_SRC ipython :session features :results raw
data['Common Neighbors'] = data.index.map(
    lambda city: len(list(networkx.common_neighbors(major_cities, city[0], city[1]))))

data.head()
#+END_SRC

#+RESULTS:
                                         weight  preferential attachment  \
(Indianapolis, IN, Cleveland, OH)    422.649766                      182   
(Indianapolis, IN, Atlanta, GA)      687.175145                      117   
(Indianapolis, IN, Washington D.C.)  789.403445                      156   
(Indianapolis, IN, Kansas City, MO)  726.252074                      182   
(Indianapolis, IN, Raleigh, NC)      795.009623                      169   
