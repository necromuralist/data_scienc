#+TITLE: Assignment 4 - Document Similarity & Topic Modelling

* Part 1 - Document Similarity

For the first part of this assignment, you will complete the functions =doc_to_synsets= and =similarity_score= which will be used by =document_path_similarity= to find the path similarity between two documents.

The following functions are provided:
 - =convert_tag=: converts the tag given by =nltk.pos_tag= to a tag used by =wordnet.synsets=. You will need to use this function in =doc_to_synsets=.
 - =document_path_similarity=: computes the symmetrical path similarity between two documents by finding the synsets in each document using =doc_to_synsets=, then computing similarities using =similarity_score=.

You will need to finish writing the following functions:
 - =doc_to_synsets=: returns a list of synsets in document. This function should first tokenize and part of speech tag the document using =nltk.word_tokenize= and =nltk.pos_tag=. Then it should find each tokens corresponding synset using =wn.synsets(token, wordnet_tag)=. The first synset match should be used. If there is no match, that token is skipped.
 - =similarity_score=: returns the normalized similarity score of a list of synsets (s1) onto a second list of synsets (s2). For each synset in s1, find the synset in s2 with the largest similarity value. Sum all of the largest similarity values together and normalize this value by dividing it by the number of largest similarity values found. Be careful with data types, which should be floats. Missing values should be ignored.

Once =doc_to_synsets= and =similarity_score= have been completed, submit to the autograder which will run =test_document_path_similarity= to test that these functions are running correctly. 

*Do not modify the functions =convert_tag=, =document_path_similarity=, and =test_document_path_similarity=.*

#+BEGIN_SRC python :tangle assignment_4.py
<<imports>>

<<lemmatizer>>

<<convert-tag>>

<<doc-to-synsets>>

<<similarity-score>>

<<document-path-similarity>>
#+END_SRC

#+RESULTS:

** Imports and Setup

#+BEGIN_SRC ipython :session assignment4 :results none :noweb-ref imports
from nltk.corpus import wordnet
from nltk.corpus.reader import WordNetError
from nltk.stem.wordnet import WordNetLemmatizer
from sklearn.metrics import accuracy_score
import nltk
import numpy
import pandas
pd = pandas
np = numpy
wn = wordnet
#+END_SRC

#+BEGIN_SRC ipython :session assignment4 :results none :noweb-ref lemmatizer
LEMMATIZER = WordNetLemmatizer()
#+END_SRC

** Convert Tag

#+BEGIN_SRC ipython :session assignment4 :results none :noweb-ref convert-tag
def convert_tag(tag):
    """Convert the tag given by nltk.pos_tag to the tag used by wordnet.synsets"""
    
    tag_dict = {'N': 'n', 'J': 'a', 'R': 'r', 'V': 'v'}
    try:
        return tag_dict[tag[0]]
    except KeyError:
        return None
#+END_SRC

** Doc to Synsets

#+BEGIN_SRC ipython :session assignment4 :results none :noweb-ref doc-to-synsets
def doc_to_synsets(doc):
    """
    Returns a list of synsets in document.

    Tokenizes and tags the words in the document doc.
    Then finds the first synset for each word/tag combination.
    If a synset is not found for that combination it is skipped.

    Args:
        doc: string to be converted

    Returns:
        list of synsets

    Example:
        doc_to_synsets('Fish are nvqjp friends.')
        Out: [Synset('fish.n.01'), Synset('be.v.01'), Synset('friend.n.01')]
    """
    tokens = nltk.word_tokenize(doc)
    tags = nltk.pos_tag(tokens)
    synsets = []
    for (token, pos_tag) in tags:
        wordnet_tag = convert_tag(pos_tag)
        #if wordnet_tag is None:
        #     continue
        word = LEMMATIZER.lemmatize(token.lower())
        try:
            # synsets.append(wordnet.synset("{}.{}.01".format(word,
            #                                                 wordnet_tag)))
            synsets.append(wordnet.synsets(token, wordnet_tag)[0])
        except (WordNetError, IndexError):
            pass
    return synsets
#+END_SRC

** Similarity Score

#+BEGIN_SRC ipython :session assignment4 :results none :noweb-ref similarity-score
def similarity_score(s1, s2):
    """
    Calculate the normalized similarity score of s1 onto s2

    For each synset in s1, finds the synset in s2 with the largest similarity value.
    Sum all of the largest similarity values and normalize this value by dividing it by the
    number of largest similarity values found.

    Args:
        s1, s2: list of synsets from doc_to_synsets

    Returns:
        normalized similarity score of s1 onto s2

    Example:
        synsets1 = doc_to_synsets('I like cats')
        synsets2 = doc_to_synsets('I like dogs')
        similarity_score(synsets1, synsets2)
        Out: 0.73333333333333339
    """
    scores = []
    for synset in s1:
        similarities = (synset.path_similarity(other) for other in s2)
        similarities = (similarity for similarity in similarities
                        if similarity is not None)
        try:
            scores.append(max(similarities))
        except (ValueError, WordNetError):
            pass
    return numpy.mean(scores)
#+END_SRC

** Document Path Similarity

#+BEGIN_SRC ipython :session assignment4 :results none :noweb-ref document-path-similarity
def document_path_similarity(doc1, doc2):
    """Finds the symmetrical similarity between doc1 and doc2"""
    synsets1 = doc_to_synsets(doc1)
    synsets2 = doc_to_synsets(doc2)
    return (similarity_score(synsets1, synsets2) + similarity_score(synsets2, synsets1)) / 2
#+END_SRC

** test_document_path_similarity

Use this function to check if doc_to_synsets and similarity_score are correct.

*This function should return the similarity score as a float.*

#+BEGIN_SRC ipython :session assignment4 :results none
def test_document_path_similarity():
    doc1 = 'This is a function to test document_path_similarity.'
    doc2 = 'Use this function to see if your code in doc_to_synsets     and similarity_score is correct!'
    return document_path_similarity(doc1, doc2)
#+END_SRC

#+BEGIN_SRC ipython :session assignment4
test_document_path_similarity()
#+END_SRC

#+RESULTS:
: 0.6392857142857143

** Predictions Using Document Similarity
=paraphrases= is a DataFrame which contains the following columns: =Quality=, =D1=, and =D2=.

=Quality= is an indicator variable which indicates if the two documents =D1= and =D2= are paraphrases of one another (1 for paraphrase, 0 for not paraphrase).

#+BEGIN_SRC ipython :session assignment4
# Use this dataframe for questions most_similar_docs and label_accuracy
paraphrases = pandas.read_csv('paraphrases.csv')
paraphrases.head()
#+END_SRC

#+RESULTS:
#+begin_example
   Quality                                                 D1  \
0        1  Ms Stewart, the chief executive, was not expec...   
1        1  After more than two years' detention under the...   
2        1  "It still remains to be seen whether the reven...   
3        0  And it's going to be a wild ride," said Allan ...   
4        1  The cards are issued by Mexico's consulates to...   

                                                  D2  
0  Ms Stewart, 61, its chief executive officer an...  
1  After more than two years in detention by the ...  
2  "It remains to be seen whether the revenue rec...  
3  Now the rest is just mechanical," said Allan H...  
4  The card is issued by Mexico's consulates to i...  
#+end_example

#+BEGIN_SRC ipython :session assignment4 :results output
print(paraphrases.shape)
#+END_SRC

#+RESULTS:
: (20, 3)

*** most_similar_docs
        
Using `document_path_similarity`, find the pair of documents in paraphrases which has the maximum similarity score.

*This function should return a tuple `(D1, D2, similarity_score)`*

#+BEGIN_SRC ipython :session assignment4 :results none
def paraphrase_similarities():
    """returns the similarity scores for ``paraphrase``

    Returns:
     pandas.Series: similarity scores for documents in ``paraphrase``
    """
    return paraphrases.apply(
        lambda row: document_path_similarity(row.D1, row.D2), axis=1)
#+END_SRC

#+BEGIN_SRC ipython :session assignment4 :results none
PARAPHRASE_SIMILARITIES = paraphrase_similarities()
#+END_SRC

#+BEGIN_SRC ipython :session assignment4 :results none
def most_similar_docs():
    """finds the pair of documents in ``paraphrases`` with maximum similarity

    Returns:
     tuple: (document, document, similarity-score)
    """
    best_index = PARAPHRASE_SIMILARITIES.argmax()
    best = paraphrases.iloc[best_index]
    best_score = PARAPHRASE_SIMILARITIES.iloc[best_index]
    return (best.D1, best.D2, best_score)
#+END_SRC

#+BEGIN_SRC ipython :session assignment4 :results output
document_1, document_2, score = most_similar_docs()
print(document_1)
print(document_2)
print(score)
#+END_SRC

#+RESULTS:
: "Indeed, Iran should be put on notice that efforts to try to remake Iraq in their image will be aggressively put down," he said.
: "Iran should be on notice that attempts to remake Iraq in Iran's image will be aggressively put down," he said.
: 
: 0.968253968254

*** label_accuracy

Provide labels for the twenty pairs of documents by computing the similarity for each pair using =document_path_similarity=. Let the classifier rule be that if the score is greater than 0.75, label is paraphrase (1), else label is not paraphrase (0). Report accuracy of the classifier using scikit-learn's accuracy_score.

*This function should return a float.*

#+BEGIN_SRC ipython :session assignment4 :results none
SIMILARITY_THRESHOLD = 0.75
#+END_SRC

#+BEGIN_SRC ipython :session assignment4 :results none
def label_accuracy():
    """finds accuracy for similarity-score-based labels

    Returns:
     float: accuracy of the similarity score labels
    """
    calculated = PARAPHRASE_SIMILARITIES.apply(
        lambda score: 1 if score > SIMILARITY_THRESHOLD else 0)
    return accuracy_score(paraphrases.Quality, calculated)
#+END_SRC

#+BEGIN_SRC ipython :session assignment4 :results output
print(label_accuracy())
#+END_SRC

#+RESULTS:
: 0.8

* Part 2 - Topic Modelling

For the second part of this assignment, you will use Gensim's LDA (Latent Dirichlet Allocation) model to model topics in =newsgroup_data=. You will first need to finish the code in the cell below by using gensim.models.ldamodel.LdaModel constructor to estimate LDA model parameters on the corpus, and save to the variable =ldamodel=. Extract 10 topics using =corpus= and =id_map=, and with =passes=25= and =random_state=34=.

** Imports
#+BEGIN_SRC ipython :session assignment4 :results none
import pickle
import gensim
from sklearn.feature_extraction.text import CountVectorizer
#+END_SRC

#+BEGIN_SRC ipython :session assignment4 :results none
PASSES = 25
RANDOM_STATE = 34
TOPICS = 10
#+END_SRC

** Data Documents
#+BEGIN_SRC ipython :session assignment4 :results none
# Load the list of documents
with open('newsgroups', 'rb') as f:
    newsgroup_data = pickle.load(f)
#+END_SRC

Use CountVectorizor to find three letter tokens, remove stop_words, remove tokens that don't appear in at least 20 documents, and remove tokens that appear in more than 20% of the documents.

#+BEGIN_SRC ipython :session assignment4 :results none
vect = CountVectorizer(min_df=20, max_df=0.2, stop_words='english', 
                       token_pattern='(?u)\\b\\w\\w\\w+\\b')
vect.fit(newsgroup_data)
#+END_SRC

#+BEGIN_SRC ipython :session assignment4 :results none
def data_to_corpus(data):
    """converts the data to a gensim corpus

    Returns:
     gensim.matutils.Sparse2Corpus: corpus for the data
    """
    # Fit and transform
    X = vect.transform(data)

    # Convert sparse matrix to gensim corpus.
    return gensim.matutils.Sparse2Corpus(X, documents_columns=False)

corpus = data_to_corpus(newsgroup_data)

# Mapping from word IDs to words (To be used in LdaModel's id2word parameter)
id_map = dict((v, k) for k, v in vect.vocabulary_.items())
#+END_SRC

** LDA Model
Use the =gensim.models.ldamodel.LdaModel= constructor to estimate  LDA model parameters on the corpus, and save to the variable =ldamodel=.

#+BEGIN_SRC ipython :session assignment4 :results none
# Your code here:
ldamodel = gensim.models.ldamodel.LdaModel(corpus, num_topics=TOPICS,
                                           passes=PASSES,
                                           random_state=RANDOM_STATE,
                                           id2word=id_map)
#+END_SRC

** lda_topics

Using =ldamodel=, find a list of the 10 topics and the most significant 10 words in each topic. This should be structured as a list of 10 tuples where each tuple takes on the form:

 =(9, '0.068*"space" + 0.036*"nasa" + 0.021*"science" + 0.020*"edu" + 0.019*"data" + 0.017*"shuttle" + 0.015*"launch" + 0.015*"available" + 0.014*"center" + 0.014*"sci"')=

for example.

*This function should return a list of tuples.*

#+BEGIN_SRC ipython :session assignment4 :results none
def lda_topics():
    """gets top 10 words for each topic

    Returns:
     tuple: (topic-number, top-10 words as string)
    """    
    return [(topic, ldamodel.print_topic(topic)) for topic in range(TOPICS)]
#+END_SRC

#+BEGIN_SRC ipython :session assignment4 :results output
print(lda_topics())
#+END_SRC

#+RESULTS:
: [(0, '0.056*"edu" + 0.043*"com" + 0.033*"thanks" + 0.022*"mail" + 0.021*"know" + 0.020*"does" + 0.014*"info" + 0.012*"monitor" + 0.010*"looking" + 0.010*"don"'), (1, '0.024*"ground" + 0.018*"current" + 0.018*"just" + 0.013*"want" + 0.013*"use" + 0.011*"using" + 0.011*"used" + 0.010*"power" + 0.010*"speed" + 0.010*"output"'), (2, '0.061*"drive" + 0.042*"disk" + 0.033*"scsi" + 0.030*"drives" + 0.028*"hard" + 0.028*"controller" + 0.027*"card" + 0.020*"rom" + 0.018*"floppy" + 0.017*"bus"'), (3, '0.023*"time" + 0.015*"atheism" + 0.014*"list" + 0.013*"left" + 0.012*"alt" + 0.012*"faq" + 0.012*"probably" + 0.011*"know" + 0.011*"send" + 0.010*"months"'), (4, '0.025*"car" + 0.016*"just" + 0.014*"don" + 0.014*"bike" + 0.012*"good" + 0.011*"new" + 0.011*"think" + 0.010*"year" + 0.010*"cars" + 0.010*"time"'), (5, '0.030*"game" + 0.027*"team" + 0.023*"year" + 0.017*"games" + 0.016*"play" + 0.012*"season" + 0.012*"players" + 0.012*"win" + 0.011*"hockey" + 0.011*"good"'), (6, '0.017*"information" + 0.014*"help" + 0.014*"medical" + 0.012*"new" + 0.012*"use" + 0.012*"000" + 0.012*"research" + 0.011*"university" + 0.010*"number" + 0.010*"program"'), (7, '0.022*"don" + 0.021*"people" + 0.018*"think" + 0.017*"just" + 0.012*"say" + 0.011*"know" + 0.011*"does" + 0.011*"good" + 0.010*"god" + 0.009*"way"'), (8, '0.034*"use" + 0.023*"apple" + 0.020*"power" + 0.016*"time" + 0.015*"data" + 0.015*"software" + 0.012*"pin" + 0.012*"memory" + 0.012*"simms" + 0.012*"port"'), (9, '0.068*"space" + 0.036*"nasa" + 0.021*"science" + 0.020*"edu" + 0.019*"data" + 0.017*"shuttle" + 0.015*"launch" + 0.015*"available" + 0.014*"center" + 0.014*"sci"')]

** topic_distribution

For the new document =new_doc=, find the topic distribution. Remember to use =vect.transform= on the he new doc, and =Sparse2Corpus= to convert the sparse matrix to gensim corpus.

*This function should return a list of tuples, where each tuple is `(#topic, probability)`*

#+BEGIN_SRC ipython :session assignment4 :results none
new_doc = ["\n\nIt's my understanding that the freezing will start to occur because of the\ngrowing distance of Pluto and Charon from the Sun, due to it's\nelliptical orbit. It is not due to shadowing effects. \n\n\nPluto can shadow Charon, and vice-versa.\n\nGeorge Krumins\n-- "]
#+END_SRC

#+BEGIN_SRC ipython :session assignment4 :results none
def topic_distribution():
    """gets the topic distribution for the `new_doc`

    Returns:
     List[Tuple]: list of topics with their probabilities
    """
    corpus = data_to_corpus(new_doc)
    return list(ldamodel.get_document_topics(corpus))[0]
#+END_SRC

#+BEGIN_SRC ipython :session assignment4 :results output
print(topic_distribution())
#+END_SRC

#+RESULTS:
: [(0, 0.020001831829864054), (1, 0.02000204822465949), (2, 0.02000000083212411), (3, 0.49631042031583561), (4, 0.020002764135450282), (5, 0.020002856012202509), (6, 0.020001696374813884), (7, 0.020001367510038583), (8, 0.020001848233010606), (9, 0.34367516653200092)]

** topic_names

From the list of the following given topics, assign topic names to the topics you found. If none of these names best matches the topics you found, create a new 1-3 word "title" for the topic.

Topics: 
 - Health
 - Science
 - Automobiles
 - Politics
 - Government
 - Travel
 - Computers & IT
 - Sports
 - Business
 - Society & Lifestyle
 - Religion
 - Education

*This function should return a list of 10 strings.*

#+BEGIN_SRC ipython :session assignment4 :results none
def topic_names():
    topics = ["Education",
              "Electricity & Power",
              "Computers & IT",
              "Religion" ,
              "Automobiles",
              "Sports",
              "Miscellany",
              "use",
              "Science", 
              "PC"]
    
    return topics
#+END_SRC

* Submissions
** Submission 1
   - Function test_document_path_similarity was answered correctly, 0.4 points were awarded.
   - Function lda_topics was answered correctly, 0.12 points were awarded.
   - Function topic_names was answered correctly, 0.12 points were awarded.

   - Function most_similar_docs was answered incorrectly, 0.12 points were not awarded.
   - Function label_accuracy was answered incorrectly, 0.12 points were not awarded.
   - Function topic_distribution was answered incorrectly, 0.12 points were not awarded.

** Submission 3
   - Function test_document_path_similarity was answered correctly, 0.4 points were awarded.
   - Function most_similar_docs was answered correctly, 0.12 points were awarded.
   - Function lda_topics was answered correctly, 0.12 points were awarded.
   - Function topic_distribution was answered correctly, 0.12 points were awarded

   - Function label_accuracy was answered incorrectly, 0.12 points were not awarded.
   - Function topic_names was answered incorrectly, 0.12 points were not awarded
     + Check that you solution returns a list of length 10!
** Submission 4

   - Function test_document_path_similarity was answered correctly, 0.4 points were awarded.
   - Function most_similar_docs was answered correctly, 0.12 points were awarded.
   - Function lda_topics was answered correctly, 0.12 points were awarded.
   - Function topic_distribution was answered correctly, 0.12 points were awarded.
   - Function topic_names was answered correctly, 0.12 points were awarded.

   - Function label_accuracy was answered incorrectly, 0.12 points were not awarded.
