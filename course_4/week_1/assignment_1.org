#+TITLE: Assignment 1

* Introduction
In this assignment, you'll be working with messy medical data and using regular expressions to extract relevant information from the data. 

Each line of the =dates.txt= file corresponds to a medical note. Each note has a date that needs to be extracted, but each date is encoded in one of many formats.

The goal of this assignment is to correctly identify all of the different date variants encoded in this dataset and to properly normalize and sort the dates. 

Here is a list of some of the variants you might encounter in this dataset:

 - 04/20/2009; 04/20/09; 4/20/09; 4/3/09
 - Mar-20-2009; Mar 20, 2009; March 20, 2009;  Mar. 20, 2009; Mar 20 2009;
 - 20 Mar 2009; 20 March 2009; 20 Mar. 2009; 20 March, 2009
 - Mar 20th, 2009; Mar 21st, 2009; Mar 22nd, 2009
 - Feb 2009; Sep 2009; Oct 2010
 - 6/2008; 12/2009
 - 2009; 2010
 
Once you have extracted these date patterns from the text, the next step is to sort them in ascending chronological order accoring to the following rules:

 -  Assume all dates in xx/xx/xx format are mm/dd/yy
 -  Assume all dates where year is encoded in only two digits are years from the 1900's (e.g. 1/5/89 is January 5th, 1989)
 -  If the day is missing (e.g. 9/2009), assume it is the first day of the month (e.g. September 1, 2009).
 -  If the month is missing (e.g. 2010), assume it is the first of January of that year (e.g. January 1, 2010).

With these rules in mind, find the correct date in each note and return a pandas Series in chronological order of the original Series' indices.
 
For example if the original series was this:

#+BEGIN_EXAMPLE
     0    1999
     1    2010
     2    1978
     3    2015
     4    1985
#+END_EXAMPLE

# Your function should return this:

#+BEGIN_EXAMPLE
     0    2
     1    4
     2    0
     3    1
     4    3
#+END_EXAMPLE

Your score will be calculated using [Kendall's tau](https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient), a correlation measure for ordinal data.
 
*This function should return a Series of length 500 and dtype int.*
* Imports
#+BEGIN_SRC ipython :session assignment1 :results none
import pandas
#+END_SRC

* Loading The Data

#+BEGIN_SRC ipython :session assignment1
with open('dates.txt') as reader:
    data_string = reader.read()
    data = pandas.Series(data_string.splitlines())

data.head(10)
#+END_SRC

#+RESULTS:
#+begin_example
0           03/25/93 Total time of visit (in minutes):
1                         6/18/85 Primary Care Doctor:
2    sshe plans to move as of 7/8/71 In-Home Servic...
3                  7 on 9/27/75 Audit C Score Current:
4    2/6/96 sleep studyPain Treatment Pain Level (N...
5                      .Per 7/06/79 Movement D/O note:
6    4, 5/18/78 Patient's thoughts about current su...
7    10/24/89 CPT Code: 90801 - Psychiatric Diagnos...
8                           3/7/86 SOS-10 Total Score:
9               (4/10/71)Score-1Audit C Score Current:
dtype: object
#+end_example

#+BEGIN_SRC ipython :session assignment1
data.describe()
#+END_SRC

#+RESULTS:
: count                                                   500
: unique                                                  500
: top       4-13-89 Communication with referring physician...
: freq                                                      1
: dtype: object

* The Grammar
#+BEGIN_SRC ipython :session assignment1 :results none
ZERO_OR_MORE = '*'
ONE_OR_MORE = "+"
ZERO_OR_ONE = '?'
EXACTLY_TWO = "{2}"
ONE_OR_TWO = "{1,2}"
DIGIT = r"\d"
ONE_OR_TWO_DIGITS = DIGIT + ONE_OR_TWO
NON_DIGIT = r"(?=[^\d])"
TWO_DIGITS = DIGIT + EXACTLY_TWO
EXACTLY_TWO_DIGITS = DIGIT + EXACTLY_TWO + NON_DIGIT
FOUR_DIGITS = DIGIT + r"{4}" + NON_DIGIT

GROUP = r"({})"
NAMED = r"(?P<{}>{})"

SLASH = r"/"
OR = r'|'
LOWER_CASE = "a-z"
SPACE = "\s"
DOT = "."
DASH = "-"
COMMA = ","
CLASS = "[{}]"

MONTH_SUFFIX = (CLASS.format(LOWER_CASE) + ZERO_OR_MORE
                + CLASS.format(SPACE + DOT + DASH) + ZERO_OR_ONE)
MONTHS = "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split()
MONTHS = [month + MONTH_SUFFIX for month in MONTHS]
MONTHS = GROUP.format(OR.join(MONTHS))
DAY_SUFFIX = CLASS.format(DASH + COMMA + SPACE) + ONE_OR_TWO
DAYS = ONE_OR_TWO_DIGITS + DAY_SUFFIX
YEAR = FOUR_DIGITS

CONTRACTION = NAMED.format("contraction",
                           MONTHS
                           + ONE_OR_TWO_DIGITS
                           + LOWER_CASE
                           + EXACTLY_TWO
                           + DAY_SUFFIX
                           + YEAR)
NO_DAY = NAMED.format("no_day", MONTHS + YEAR)
WORDS = NAMED.format("words", MONTHS + DAYS + YEAR)

BACK_WARDS = NAMED.format("backwards", ONE_OR_TWO_DIGITS + SPACE + MONTHS + YEAR)
TWENTIETH_CENTURY = NAMED.format("twentieth",
                                 SLASH.join([ONE_OR_TWO_DIGITS,
                                             ONE_OR_TWO_DIGITS,
                                             EXACTLY_TWO_DIGITS]))
NUMERIC = NAMED.format("numeric",
                       SLASH.join([ONE_OR_TWO_DIGITS,
                                   ONE_OR_TWO_DIGITS,
                                   FOUR_DIGITS]))
DATE = NAMED.format("date", OR.join([NUMERIC, TWENTIETH_CENTURY, WORDS,
                                     BACK_WARDS, CONTRACTION, NO_DAY]))
#+END_SRC

#+BEGIN_SRC ipython :session assignment1 :results none
def twentieth_century(date):
    """adds a 19 to the year

    Args:
     date (re.Regex): Extracted date
    """
    month, day, year = date.group(1).split(SLASH)
    year = "19{}".format(year)
    return SLASH.join([month, day, year])
#+END_SRC

#+BEGIN_SRC ipython :session assignment1 :results none
def take_two(line):
    match = re.search(TWENTIETH_CENTURY, line)
    if match:
        return twentieth_century(match)
    return line
#+END_SRC

#+BEGIN_SRC ipython :session assignment1 :results output
found = data.str.extractall(DATE)
total_found = len(found.date)
numeric = len(data.str.extractall(NUMERIC)[0])
twentieth = len(data.str.extractall(TWENTIETH_CENTURY)[0])
words = len(data.str.extractall(WORDS)[0])
backwards = len(data.str.extractall(BACK_WARDS)[0])
contraction = len(data.str.extractall(CONTRACTION)[0])
no_day = len(data.str.extractall(NO_DAY)[0])

print(total_found - (numeric + twentieth + words + backwards  + contraction + no_day))
print(total_found)
print(found.head())

#+END_SRC

#+RESULTS:
: -66
: 313
:              date    1         2    3    4    5    6   7   8    9   10
:   match                                                               
: 0 0      03/25/93  NaN  03/25/93  NaN  NaN  NaN  NaN NaN NaN  NaN  NaN
: 1 0       6/18/85  NaN   6/18/85  NaN  NaN  NaN  NaN NaN NaN  NaN  NaN
: 2 0        7/8/71  NaN    7/8/71  NaN  NaN  NaN  NaN NaN NaN  NaN  NaN
: 3 0       9/27/75  NaN   9/27/75  NaN  NaN  NaN  NaN NaN NaN  NaN  NaN
: 4 0        2/6/96  NaN    2/6/96  NaN  NaN  NaN  NaN NaN NaN  NaN  NaN

* The date_sorter Function

#+BEGIN_SRC ipython :session assignment1 :results none
def date_sorter():
    
    # Your code here
    
    return # Your answer here
#+END_SRC

