#+TITLE:  Assignment 1 - Creating and Manipulating Graphs

* Introduction
Eight employees at a small company were asked to choose 3 movies that they would most enjoy watching for the upcoming company movie night. These choices are stored in the file `Employee_Movie_Choices.txt`.

A second file, `Employee_Relationships.txt`, has data on the relationships between different coworkers. 

The relationship score has value of `-100` (Enemies) to `+100` (Best Friends). A value of zero means the two employees haven't interacted or are indifferent.

Both files are tab delimited.
* Import
#+BEGIN_SRC ipython :session assignment1 :results none
import networkx
import pandas
import numpy
from networkx.algorithms import bipartite
import seaborn
#+END_SRC

#+BEGIN_SRC ipython :session assignment1 :results none
% matplotlib inline
seaborn.set_style("whitegrid")
#+END_SRC

* Data
** This is the set of employees

#+BEGIN_SRC ipython :session assignment1 :results none
employees = set(['Pablo',
                 'Lee',
                 'Georgia',
                 'Vincent',
                 'Andy',
                 'Frida',
                 'Joan',
                 'Claude'])
#+END_SRC

** This is the set of movies
#+BEGIN_SRC ipython :session assignment1 :results none
movies = set(['The Shawshank Redemption',
              'Forrest Gump',
              'The Matrix',
              'Anaconda',
              'The Social Network',
              'The Godfather',
              'Monty Python and the Holy Grail',
              'Snakes on a Plane',
              'Kung Fu Panda',
              'The Dark Knight',
              'Mean Girls'])
#+END_SRC


* Plot Graph
You can use the following function to plot graphs.

*make sure to comment it out before submitting to the autograder*

#+BEGIN_SRC ipython :session assignment1 :results none
def plot_graph(G, weight_name=None):
    '''
    G: a networkx G
    weight_name: name of the attribute for plotting edge weights (if G is weighted)
    '''
    import matplotlib.pyplot as plt
    
    plt.figure()
    pos = networkx.spring_layout(G)
    edges = G.edges()
    weights = None
    
    if weight_name:
        weights = [int(G[u][v][weight_name]) for u,v in edges]
        labels = networkx.get_edge_attributes(G,weight_name)
        networkx.draw_networkx_edge_labels(G,pos,edge_labels=labels)
        networkx.draw_networkx(G, pos, edges=edges, width=weights);
    else:
        networkx.draw_networkx(G, pos, edges=edges);
#+END_SRC


* Question 1

Using NetworkX, load in the bipartite graph from `Employee_Movie_Choices.txt` and return that graph.

 *This function should return a networkx graph with 19 nodes and 24 edges*


#+BEGIN_SRC ipython :session assignment1 :results output
print("Nodes: {}".format(len(positions)))
print("Edges: {}".format(len(edges)))
print(networkx.is_bipartite(movie_choices))
#+END_SRC

#+RESULTS:
: Nodes: 19
: Edges: 24
: True

#+BEGIN_SRC ipython :session assignment1 :results none
def answer_one():
    movie_choices = pandas.read_table('Employee_Movie_Choices.txt')
    movie_choices = networkx.from_pandas_dataframe(movie_choices, "#Employee", "Movie")
    return movie_choices
#+END_SRC

#+BEGIN_SRC ipython :session assignment1 :file /tmp/employee_movie_choices.png
movie_choices = answer_one()
edges = movie_choices.edges()
assert len(edges) == 24
assert len(movie_choices.nodes()) == 19
assert networkx.is_bipartite(movie_choices)
positions = networkx.spring_layout(movie_choices)

networkx.draw_networkx(movie_choices, positions, edges=edges)
#+END_SRC

#+RESULTS:
[[file:/tmp/employee_movie_choices.png]]

* Question 2

Using the graph from the previous question, add nodes attributes named `'type'` where movies have the value `'movie'` and employees have the value `'employee'` and return that graph.

 *This function should return a networkx graph with node attributes `{'type': 'movie'}` or `{'type': 'employee'}`*

#+BEGIN_SRC ipython :session assignment1 :results none
def answer_two():
    
    # Your Code Here
    
    return # Your Answer Here
#+END_SRC

* Question 3

Find a weighted projection of the graph from `answer_two` which tells us how many movies different pairs of employees have in common.

 *This function should return a weighted projected graph.*

#+BEGIN_SRC ipython :session assignment1 :results none
def answer_three():
        
    # Your Code Here
    
    return # Your Answer Here
#+END_SRC

* Question 4

Suppose you'd like to find out if people that have a high relationship score also like the same types of movies.

Find the Pearson correlation ( using `DataFrame.corr()` ) between employee relationship scores and the number of movies they have in common. If two employees have no movies in common it should be treated as a 0, not a missing value, and should be included in the correlation calculation.

 *This function should return a float.*

#+BEGIN_SRC ipython :session assignment1 :results none
def answer_four():
        
    # Your Code Here
    
    return # Your Answer Here
#+END_SRC
