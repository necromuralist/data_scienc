
#+TITLE: Assignment 3 - Building a Custom Visualization

In this assignment you must choose one of the options presented below
and submit a visual as well as your source code for peer grading. The
details of how you solve the assignment are up to you, although your
assignment must use matplotlib so that your peers can evaluate your
work. The options differ in challenge level, but there are no grades
associated with the challenge level you chose. However, your peers will
be asked to ensure you at least met a minimum quality for a given
technique in order to pass. Implement the technique fully (or exceed
it!) and you should be able to earn full grades for the assignment.

Ferreira, N., Fisher, D., & Konig, A. C. (2014, April).
[[https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/Ferreira_Fisher_Sample_Oriented_Tasks.pdf][Sample-oriented task-driven visualizations: allowing users to make better, more
confident decisions.]] In Proceedings of the SIGCHI Conference on
Human Factors in Computing Systems (pp. 571-580). ACM.

In this [[https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/Ferreira_Fisher_Sample_Oriented_Tasks.pdf][paper]] the authors describe the challenges users face when trying to make
judgements about probabilistic data generated through samples. As an
example, they look at a bar chart of four years of data (replicated
below in Figure 1). Each year has a y-axis value, which is derived from
a sample of a larger dataset. For instance, the first value might be the
number votes in a given district or riding for 1992, with the average
being around 33,000. On top of this is plotted the confidence interval
-- the range of the number of votes which encapsulates 95% of the data
(see the boxplot lectures for more information, and the yerr parameter
of barcharts).

#+BEGIN_HTML
  <h4 style="text-align: center;">
#+END_HTML

        Figure 1 from (Ferreira et al, 2014).

#+BEGIN_HTML
  </h4>
#+END_HTML

A challenge that users face is that, for a given y-axis value (e.g.
42,000), it is difficult to know which x-axis values are most likely to
be representative, because the confidence levels overlap and their
distributions are different (the lengths of the confidence interval bars
are unequal). One of the solutions the authors propose for this problem
(Figure 2c) is to allow users to indicate the y-axis value of interest
(e.g. 42,000) and then draw a horizontal line and color bars based on
this value. So bars might be colored red if they are definitely above
this value (given the confidence interval), blue if they are definitely
below this value, or white if they contain this value.

#+BEGIN_HTML
  <h4 style="text-align: center;">
#+END_HTML

Figure 2c from (Ferreira et al. 2014). Note that the colorbar legend at
the bottom as well as the arrows are not required in the assignment
descriptions below.

#+BEGIN_HTML
  </h4>
#+END_HTML

*Easiest option:* Implement the bar coloring as described above - a
color scale with only three colors, (e.g. blue, white, and red). Assume
the user provides the y axis value of interest as a parameter or
variable.

*Harder option:* Implement the bar coloring as described in the paper,
where the color of the bar is actually based on the amount of data
covered (e.g. a gradient ranging from dark blue for the distribution
being certainly below this y-axis, to white if the value is certainly
contained, to dark red if the value is certainly not contained as the
distribution is above the axis).

*Even Harder option:* Add interactivity to the above, which allows the
user to click on the y axis to set the value of interest. The bar colors
should change with respect to what value the user has selected.

*Hardest option:* Allow the user to interactively set a range of y
values they are interested in, and recolor based on this (e.g. a y-axis
band, see the paper for more details).


#+BEGIN_SRC ipython :session assignment3
# Use the following data for this assignment:

import pandas as pd
import numpy as np

np.random.seed(12345)

df = pd.DataFrame([np.random.normal(33500,150000,3650), 
                   np.random.normal(41000,90000,3650), 
                   np.random.normal(41000,120000,3650), 
                   np.random.normal(48000,55000,3650)], 
                  index=[1992,1993,1994,1995])
df
#+END_src

#+RESULTS:
#+begin_example
               0              1              2              3     \
1992    2793.851077  105341.500709  -44415.807259  -49859.545652   
1993  -44406.485331  180815.466879 -108866.427539 -114625.083717   
1994  134288.798913  169097.538334  337957.368420  -76005.273164   
1995  -44485.202120    -156.410517  -13425.878636   53540.999558   

               4              5              6              7     \
1992  328367.085875  242510.874946   47436.181512   75761.922925   
1993  196807.232582   47161.295355  136522.083654   58826.904901   
1994   90130.207911    8453.626320  -24562.317561  195665.400438   
1995  130408.559874   20445.656224   60336.077232   60688.099156   

               8              9         ...                3640  \
1992  148853.385142  220465.210458      ...       138454.070217   
1993   23329.019613  -96417.638483      ...       -37809.868064   
1994  -53475.640770   44708.230667      ...       145216.405451   
1995  -12748.496722   57150.175074      ...         -636.804950   

               3641           3642           3643           3644  \
1992  122488.069943  162247.982356 -273907.868554 -138410.570396   
1993   93228.910228  108183.379950  146728.060346  -10083.899508   
1994   67773.006363   95711.194465  174500.629277  -27821.888075   
1995   49707.896672   52687.564135   13529.920850   67016.324752   

              3645           3646           3647          3648          3649  
1992  27638.756441  -33120.047151  -40989.824866  94532.974507   6128.841097  
1993 -31300.144215   95017.857057  164071.514663  14409.944591  33298.608969  
1994 -57881.583140   26321.525617  -21424.067186  60164.652898 -74750.286614  
1995  41664.942829  119870.946944   56946.289297  67927.466106  32839.707999  

[4 rows x 3650 columns]
#+end_example

#+BEGIN_SRC ipython :session assignment3
df.T.describe()
#+END_SRC

#+RESULTS:
:                 1992           1993           1994           1995
: count    3650.000000    3650.000000    3650.000000    3650.000000
: mean    34484.080607   39975.673587   37565.689950   47798.504333
: std    150473.176164   88558.520583  120317.078777   54828.074297
: min   -528303.381600 -287127.421315 -382709.382654 -138894.685422
: 25%    -67555.298773  -21665.471992  -45516.912051   11680.007981
: 50%     31756.198287   41001.778992   39197.241173   49103.396625
: 75%    135081.379021   99766.920131  121367.183244   84271.976610
: max    622629.206119  358327.854561  423792.855746  262363.983464

#+BEGIN_SRC ipython :session assignment3 :results none
%matplotlib inline
import matplotlib.pyplot as pyplot
import numpy
import pandas
import scipy.stats as stats
import seaborn
from tabulate import tabulate
#+END_SRC

#+BEGIN_SRC :ipython :session assignment3 :results none
style = seaborn.axes_style("whitegrid")
style["axes.grid"] = False
seaborn.set_style("whitegrid", style)
#+END_SRC

#+BEGIN_SRC ipython :session assignment3  :file figures/distributions.png :results both
figure = pyplot.figure()
axe = figure.gca()
frame = pandas.DataFrame({index:df.ix[index] for index in df.index})
frame.plot.box(ax=axe)
seaborn.despine()
#+END_SRC

#+RESULTS:
[[file:figures/distributions.png]]

#+BEGIN_SRC ipython :session assignment3 :results none
confidence = 0.95
value = 29000
# value = 33000
# value = 39974
# value = 42000
# value = 48000
# value = 49600

indices = df.index
data = (df.ix[index] for index in indices)
intervals = (stats.norm.interval(alpha=confidence,
                                 loc=datum.mean(),
                                 scale=datum.sem()) for datum in data)
lows = []
highs = []
for low, high in intervals:
    lows.append(low)
    highs.append(high)

means = df.T.mean()
errors = numpy.array(highs) - means
#+END_SRC

#+BEGIN_SRC ipython :session assignment3 :results output raw
intervals = pandas.DataFrame({indices[index]: [low, highs[index]]
                              for index, low in enumerate(lows)},
                             index="low high".split())
print(tabulate(intervals, tablefmt="orgtbl", headers="keys"))
#+END_SRC

#+RESULTS:
|      |    1992 |    1993 |    1994 |    1995 |
|------+---------+---------+---------+---------|
| low  | 29602.5 | 37102.7 | 33662.4 | 46019.8 |
| high | 39365.7 | 42848.6 |   41469 | 49577.2 | 

#+BEGIN_SRC ipython :session assignment3 :file figures/barplot.png :results both
figure = pyplot.figure()
axe = figure.gca()

x_labels = [str(index) for index in df.index]
bars = axe.bar(df.index, means, yerr=errors)
pyplot.xticks(df.index, x_labels)
pyplot.axhline(value, color='darkorange')
pyplot.text(df.index[0], value, str(value), bbox={"facecolor": "white", "boxstyle": "round"})
for index, bar in enumerate(bars):
    if value < lows[index]:
        bar.set_color('crimson')
    elif lows[index] <= value <= highs[index]:
        bar.set_color('w')
        bar.set_edgecolor("royalblue")
    else:
        bar.set_color("royalblue")
#+END_SRC

#+RESULTS:
[[file:figures/barplot.png]]

#+BEGIN_SRC ipython :session assignment3 :results none
class IntervalCheck(object):
    """colors plot based on whether a value is in range
    Args:
     data (DataFrame): frame with data of interest as columns
     confidence_interval (float): probability we want to exceed
    """
    def __init__(self, data, confidence_interval=0.95):
        self.data = data
        self.confidence_interval = confidence_interval
        self._intervals = None
        self._lows = None
        self._highs = None
        self._errors = None
        self._means = None
        self._errors = None
        return

    @property
    def intervals(self):
        """list of high and low interval tuples"""
        if self._intervals is None:    
            data = (self.data[column] for column in self.data)
            self._intervals = [stats.norm.interval(alpha=confidence,
                                                   loc=datum.mean(),
                                                   scale=datum.sem())
                               for datum in data]
        return self._intervals

    @property
    def lows(self):
        """the low-ends for the confidence intervals
        Returns:
         numpy.array of low-end confidence interval values
        """
        if self._lows is None:
            self._lows = numpy.array([low for low, high in self.intervals])
        return self._lows

    @property
    def highs(self):
        """high-ends for the confidence intervals
        Returns:
         numpy.array of high-end values for confidence intervals
        """
        if self._highs is None:
            self._highs = numpy.array([high for low, high in self.intervals])
        return self._highs

    @property
    def means(self):
        """the means of the data-arrays"""
        if self._means is None:
            self._means = self.data.mean()
        return self._means

    @property
    def errors(self):
        """The size of the errors, rather than the ci values"""
        if self._errors is None:
            self._errors = self.highs - self.means
        return self._errors

    def print_intervals(self):
        """print org-mode formatted table of the confidence intervals"""
        intervals = pandas.DataFrame({column: self.intervals[index]
                                      for index, column in enumerate(self.data.columns)},
                                     index="low high".split())
        try:
            print(tabulate(intervals, tablefmt="orgtbl", headers="keys"))
        except ImportError:
            # not supported
            pass
        return

    def __call__(self, value):
        """plots the data and value
        ,* blue bar if value above c.i.
        ,* white bar if value in c.i.
        ,* red bar if value is below c.i.

        Args:
         value (float): what to compare to the data
        """
        figure = pyplot.figure()
        axe = figure.gca()

        x_labels = [str(index) for index in self.data.columns]
        bars = axe.bar(self.data.columns, self.means, yerr=self.errors)
        pyplot.xticks(self.data.columns, x_labels)
        pyplot.axhline(value, color='darkorange')
        pyplot.text(self.data.columns[0], value, str(value),
                    bbox={"facecolor": "white", "boxstyle": "round"})
        for index, bar in enumerate(bars):
            if value < self.lows[index]:
                bar.set_color('crimson')
            elif self.lows[index] <= value <= self.highs[index]:
                bar.set_color('w')
                bar.set_edgecolor("royalblue")
            else:
                bar.set_color("royalblue")
        return
#+END_SRC

#+BEGIN_SRC ipython :session assignment3 :results output raw
plotter = IntervalCheck(data=df.T)
plotter.print_intervals()
#+END_SRC

#+RESULTS:
|      |    1992 |    1993 |    1994 |    1995 |
|------+---------+---------+---------+---------|
| low  | 29602.5 | 37102.7 | 33662.4 | 46019.8 |
| high | 39365.7 | 42848.6 |   41469 | 49577.2 |

#+BEGIN_SRC ipython :session assignment3 :file figures/barplot2.png
# value = 29000
# value = 33000
value = 39974
# value = 42000
# value = 48000
# value = 49600
plotter(value)
#+END_SRC

#+RESULTS:
[[file:figures/barplot2.png]]
