* Imports
  #+BEGIN_SRC ipython :session assignment4 :results none
  # python standard library
  import os

  # third party
  import matplotlib.pyplot as pyplot
  import pandas
  import requests
  import seaborn
  #+END_SRC

  #+BEGIN_SRC ipython :session assignment4 :results none
  %matplotlib inline
  seaborn.set_style("whitegrid")
  #+END_SRC

  #+BEGIN_SRC ipython :session assignment4 :results none
  EMPLOYMENT_DATA = "portland_hillsboro_vancouver_2007_2017.csv"
  EMPLOYMENT_URL = ("https://www.dropbox.com/s/gafy5iddilo26wk/"
                    "portland_hillsboro_vancouver_"
                    "employment_2007_2017.csv?dl=1")
  #+END_SRC
* Data
** Downloading
  The data represents  `Local Area Unemployment Statistics` for the *Portland-Hillsboro-Vancouver* area in Oregon and was taken from the [[https://data.bls.gov/cgi-bin/surveymost?la+41][Bureau of Labor Statistics]].  

  I saved it to dropbox so it can be [[https://www.dropbox.com/s/gafy5iddilo26wk/portland_hillsboro_vancouver_employment_2007_2017.csv?dl=1][downloaded]].

  | Item                    | Value                                                                               |
  |-------------------------+-------------------------------------------------------------------------------------|
  | Data extracted on       | April 25, 2017 (3:13:28 PM)                                                         |
  | Series Id               | LAUMT413890000000003,LAUMT413890000000004,LAUMT413890000000005,LAUMT413890000000006 |
  | Not Seasonally Adjusted |                                                                                     |
  | Area                    | Portland-Vancouver-Hillsboro, OR-WA Metropolitan Statistical Area                   |
  | Area Type               | Metropolitan areas                                                                  |
  | State/Region/Division   | Oregon                                                                              |

  #+BEGIN_SRC ipython :session assignment4 :results none
  if not os.path.isfile(EMPLOYMENT_DATA):
      response = requests.get(EMPLOYMENT_URL)
      with open(EMPLOYMENT_DATA, 'w') as writer:
          writer.write(response.text)
  data = pandas.read_csv(EMPLOYMENT_DATA)
  #+END_SRC

  #+BEGIN_SRC ipython :session assignment4
  data.describe()
  #+END_SRC

  #+RESULTS:
  :               Year
  : count   122.000000
  : mean   2011.590164
  : std       2.945101
  : min    2007.000000
  : 25%    2009.000000
  : 50%    2012.000000
  : 75%    2014.000000
  : max    2017.000000

  #+BEGIN_SRC ipython :session assignment4
  data.head()
  #+END_SRC

  #+RESULTS:
  :    Year Period labor force employment unemployment unemployment rate
  : 0  2007    Jan     1134639    1073299        61340               5.4
  : 1  2007    Feb     1138297    1075914        62383               5.5
  : 2  2007    Mar     1139649    1079579        60070               5.3
  : 3  2007    Apr     1135817    1079570        56247               5.0
  : 4  2007    May     1135088    1081737        53351               4.7

  For some reason there are more columns in the data then there are in the =describe= method.

  #+BEGIN_SRC ipython :session assignment4
  data.tail()
  #+END_SRC

  #+RESULTS:
  :      Year Period labor force  employment unemployment unemployment rate
  : 117  2016    Oct  1287314(R)  1229779(R)     57535(R)            4.5(R)
  : 118  2016    Nov  1289464(R)  1235529(R)     53935(R)            4.2(R)
  : 119  2016    Dec  1282972(R)  1231411(R)     51561(R)            4.0(R)
  : 120  2017    Jan     1278225     1223966        54259               4.2
  : 121  2017    Feb  1284347(P)  1234703(P)     49644(P)            3.9(P)

  It turns out that the Bureau adds extra labels to the data. According to the site there are two.

  | Label | Meaning                                          |
  |-------+--------------------------------------------------|
  | R     | Data were subject to revision on April 21, 2017. |
  | P     | Preliminary.                                     |

** Cleaning
   I'm going to remove the labels but first I'll re-name the columns with spaces in their names to make it closer to my naming convention.

   #+BEGIN_SRC ipython :session assignment4
   data.rename(columns={"labor force": "labor_force",
                        "unemployment rate": "unemployment_rate"},
               inplace=True)
   data.columns
   #+END_SRC

   #+RESULTS:
   : Index(['Year', 'Period', 'labor_force', 'employment', 'unemployment',
   :        'unemployment_rate'],
   :       dtype='object')
   
   Now I'll strip the labels.

   #+BEGIN_SRC ipython :session assignment4
   pattern = "\(R\)||\(P\)"
   columns = ["labor_force", "employment", "unemployment", "unemployment_rate"]
   for column in columns:
       data[column] = data[column].str.rstrip(pattern)
   data.describe()
   #+END_SRC

   #+RESULTS:
   :               Year
   : count   122.000000
   : mean   2011.590164
   : std       2.945101
   : min    2007.000000
   : 25%    2009.000000
   : 50%    2012.000000
   : 75%    2014.000000
   : max    2017.000000

   The data still isn't picking up the other columns, possibly because I didn't re-cast them to numbers.

#+BEGIN_SRC ipython :session assignment4
data.tail()
#+END_SRC

#+RESULTS:
:      Year Period labor_force employment unemployment unemployment_rate
: 117  2016    Oct     1287314    1229779        57535               4.5
: 118  2016    Nov     1289464    1235529        53935               4.2
: 119  2016    Dec     1282972    1231411        51561               4.0
: 120  2017    Jan     1278225    1223966        54259               4.2
: 121  2017    Feb     1284347    1234703        49644               3.9

#+BEGIN_SRC ipython :session assignment4
data[columns] = data[columns].apply(pandas.to_numeric)
data.describe()
#+END_SRC

#+RESULTS:
#+begin_example
              Year   labor_force    employment   unemployment  \
count   122.000000  1.220000e+02  1.220000e+02     122.000000   
mean   2011.590164  1.201675e+06  1.115516e+06   86158.557377   
std       2.945101  3.660963e+04  4.724591e+04   26167.286950   
min    2007.000000  1.134639e+06  1.047621e+06   49644.000000   
25%    2009.000000  1.180418e+06  1.088475e+06   63107.500000   
50%    2012.000000  1.200312e+06  1.102644e+06   79834.500000   
75%    2014.000000  1.214507e+06  1.133689e+06  107976.250000   
max    2017.000000  1.289464e+06  1.235529e+06  136640.000000   

       unemployment_rate  
count         122.000000  
mean            7.181967  
std             2.203154  
min             3.900000  
25%             5.300000  
50%             6.750000  
75%             8.875000  
max            11.400000
#+end_example

** Creating Date-Times

   To make a time-series we need to create an extra column from the *Year* and *Period* (month) columns.

   #+BEGIN_SRC ipython :session assignment4
   data["date"] = data.apply(lambda x: "{0}-{1}".format(x.Period, x.Year), axis=1)
   data.head()
   #+END_SRC

   #+RESULTS:
   #+begin_example
      Year Period  labor_force  employment  unemployment  unemployment_rate  \
   0  2007    Jan      1134639     1073299         61340                5.4   
   1  2007    Feb      1138297     1075914         62383                5.5   
   2  2007    Mar      1139649     1079579         60070                5.3   
   3  2007    Apr      1135817     1079570         56247                5.0   
   4  2007    May      1135088     1081737         53351                4.7   

      month      date  
   0      1  Jan-2007  
   1      2  Feb-2007  
   2      3  Mar-2007  
   3      4  Apr-2007  
   4      5  May-2007  
#+end_example

   
* Unemployment Rate Over Time

  #+BEGIN_SRC ipython :session assignment4 :file /tmp/unemployment_over_time.png
  figure = pyplot.figure(figsize=(10, 10))
  axe = figure.gca()
  data.plot(x="date", y="unemployment_rate", ax=axe)
  axe.set_title("Unemployment Over Time")
  #+END_SRC

  #+RESULTS:
  [[file:/tmp/unemployment_over_time.png]]
